.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "API::Kaltura 3pm"
.TH API::Kaltura 3pm "2016-03-18" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SS "new"
.IX Subsection "new"
.Vb 10
\& Usage     : $KalturaAPIObj = KalturaAPI\->new({
\&    secret => \*(Aqmy secret\*(Aq,
\&    partnerId => \*(Aqmy partner ID\*(Aq,
\&    sessionType => \*(Aqsession type\*(Aq, # admin or user
\&    apiVersion => 3, # int
\&    kalturaUrl => \*(Aqhttps://my.kaltura.url\*(Aq
\& });
\& Purpose   : Initializes KalturaAPI
\& Returns   : KalturaAPI object
\& Arguments  :  A hash of data, all gathered from your Kaltura instance,
\& all required.
\&    Secret:  String containing a valid secret.
\&    partnerId:  Int partner id.
\&    sessonType:  String containing a session type.
\&        Currently only supports \*(Aquser\*(Aq and \*(Aqadmin\*(Aq
\&    apiVersion:  Int api version.
\&    kalturaUrl:  String URL of your kaltura instance.
.Ve
.SS "runService"
.IX Subsection "runService"
.Vb 10
\& Usage     : $UAObj = $KalturaAPIObj\->runService({param1 => \*(Aqparam\*(Aq, paramN => paramN})
\& Purpose   : Low level service request runner
\& Returns   : LWP::UserAgent object.
\& Argument  : A hash of parameters
\& Comment   : This routine runs all requests internally, and is
\&            exposed for convenience and testing.  Parameters
\&            are dependent on what the end goal is for the request.
\&            A simple request would be to start a session:
\&                $uaObj = KalturaAPIObject\->runService({
\&                    service => \*(Aqsession\*(Aq,
\&                    action => \*(Aqstart\*(Aq,
\&                    clientTag => \*(Aqtestme\*(Aq
\&                });
\&            To get the results, simply call the content method on
\&            the returned LWP::UserAgent object.
\& See Also   : L<LWP::UserAgent>
.Ve
.SS "startSession"
.IX Subsection "startSession"
.Vb 5
\& Usage     : $bool = $KalturaAPIObj\->startSession();
\& Purpose   : Initializes a Kaltura API session
\& Returns   : bool
\& Comment   : On success, sets the current_ks variable to the
\&            session that was returned.
.Ve
.SS "endSession"
.IX Subsection "endSession"
.Vb 3
\& Usage     : $bool = $KalturaAPIObj\->endSession();
\& Purpose   : Destroys a Kaltura API session
\& Returns   : bool
.Ve
.SS "getResult"
.IX Subsection "getResult"
.Vb 10
\& Usage     : $XMLTwigResultObject = $KalturaAPIObj\->getResult(
\&                {param1 => \*(Aqparam\*(Aq, paramN => paramN}
\&            );
\& Purpose   : Service request runner
\& Returns   : XML::Twig object
\& Argument  : A hash of parameters
\& Comment    This is a convenience method that executes runService(), and
\&            returns the "result" section of the returned XML object from
\&            Kaltura.
\& See Also   : L<XML::Twig>
.Ve
.SS "uploadFile"
.IX Subsection "uploadFile"
.Vb 10
\& Usage     : $KalturaAPIObj\->uploadFile(
\&                {param1 => \*(Aqparam\*(Aq, paramN => paramN}
\&            );
\& Purpose   : Service request runner
\& Returns   : XML::Twig object or false on error.
\& Argument  : A hash of parameters
\& Comment   : uploading a file is an arduous task that requires multiple calls
\&            this is a convenience method to sidestep all of those.  This is
\&            considered experimental
\& See Also   : L<XML::Twig>
.Ve
.SH "NAME"
KalturaAPI \- Kaltura API utility.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  use strict;
\&  use warnings;
\&  use KalturaAPI;
\&  my $kt = KalturaAPI\->new({
\&    secret => \*(Aqmy secret from Kaltura\*(Aq,
\&    kalturaUrl => \*(Aqhttps://my.kaltura.url\*(Aq,
\&    apiVersion => 3,
\&    sessionType => \*(Aqadmin\*(Aq, # admin or user only
\&    partnerId => \*(Aq1234567890\*(Aq
\&  });
\&
\&  $kt\->startSession();
\&
\&  # getResult will be the most commonly used function.
\&  #### get a user\*(Aqs KMS data.
\&  $userTwig = $kt\->getResult({
\&    service => \*(Aquser\*(Aq,
\&    action => \*(Aqget\*(Aq,
\&    userId => \*(AqsomeUserId\*(Aq
\&  });
\&
\&  # to get the raw L<LWP::UserAgent> object from Kaltura, you can use
\&  # runService.  This can be useful for troubleshooting problems.
\&  my $userUA = $kt\->runService({
\&    service => \*(Aquser\*(Aq,
\&    action => \*(Aqget\*(Aq,
\&    userId => \*(AqsomeUserId\*(Aq
\&  });
\&
\&  # Upload a file.  This is considered experimental as error catching
\&  # is not that great currently.
\&  my $upload_result = $kt\->uploadFile({
\&    file => "/path/to/a/file",
\&    type => "audio", # see Kaltura API info for valid types.
\&    categoriesIds => \*(Aq1234567890\*(Aq,
\&    name => \*(AqName for this media\*(Aq,
\&    description => \*(AqDescription for this media\*(Aq,
\&    tags => \*(Aqcomma, separated, tags\*(Aq,
\&    adminTags => \*(Aqcomma, separated, tags\*(Aq
\&  });
\&
\&  $kt\->endSession();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Easy low-level access to Kaltura \s-1API\s0 functions.
.SH "USAGE"
.IX Header "USAGE"
Documentation for services and actions can be found on
Kaltura's website.  The simplest usage of this module is as
documented in the synopsis.
.SH "BUGS"
.IX Header "BUGS"
Probably lots.  All undocumented.  May \f(CW$DEITY\fR have mercy upon you.
.SH "SUPPORT"
.IX Header "SUPPORT"
For Kaltura, refer to your account rep or the Kaltura documentation and
forums.
.PP
For this module, please contact the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&    J. Eric Ellis
\&    CPAN ID: JELLISII
\&    jellisii@gmail.com
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), XML::Twig, \s-1LWP\s0, <https://www.kaltura.com>.
